@startuml


interface Door
{
    void lock()
    void unlock()
    void open()
    void close()
}

interface ISensing {
    + void proximityCallback();
}

interface ITimed {
    + void timeOutCallback();
}


class SensingDoor implements Door, ISensing{
    - boolean _locked
    - boolean _opened

    + SensingDoor(Sensor sensor)
    + void lock()
    + void unlock()
    + void open()
    + void close()
    + void proximityCallback()

}

class TimedDoor implements Door, ITimed{
    - static final int TIME_OUT
    - boolean _locked
    - boolean _opened

    + TimedDoor(Timer timer)
    + void lock()
    + void unlock()
    + void open()
    + void close()
    + void timeOutCallback()

}

class Sensor {
    + void register(Door door)
    - boolean isPersonClose()
}

class Timer{
    + void register(long timeOut, final Door door)
}

Timer -> Door
Sensor -> Door
TimedDoor -> Timer
SensingDoor -> Sensor

@enduml